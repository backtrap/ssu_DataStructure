 * 시스템 생명 주기  System Life Cycle
대형 프로그램의 개발 단계

 1. 요구사항
 2. 분석
 3. 설계
 4. 정제와 코딩
 5. 검증

 요구 사항
프로젝트의 목적 확인
입력과 출력에 관한 정보 기술

 분석
문제를 작은 단위로 나눔

 설계
추상 데이터 타입 생성
알고리즘 명세와 설계 기법 고려

 정제와 코딩
객체에 대한 표현 선택
알고리즘 작성

 검증
 1. 정확성 증명
 2. 테스트
 3. 오류 제거


 * 알고리즘적 분해
함수적 분해
소프트웨어를 기능적 모듈로 분해

고전적 프로그래밍 기법

Pascal의 프로시져
FORTRAN의 서브 프로그램
C의 함수
등등


 * 객체 지향적 분해
객체의 집합

재사용성 향상

알고리즘적 분해보다 직관적


 * 객체 지향 프로그래밍
 객체
계산을 수행하고
상태를 갖는 개체

객체 = 데이터 + 절차적 요소

 객체 지향 프로그래밍
객체는 기본적인 구성 단위
객체는 어떤 클래스의 인스턴스
클래스는 상속 관계로 연관됨


 * 고급 프로그래밍 언어의 역사
 1세대 언어
FORTRAN
수식 계산 기능

 2세대 언어
Pascal, C
알고리즘을 효과적으로 표현

 3세대 언어
Modula
추상 데이터 타입 개념 도입

 4세대 언어
객체 지향 언어
c++, Smalltalk, Objective-C
상속 기능 지원


 * C의 장점
 1. 효율성
 2. 유연성
 3. 가용성

 효율성
하드웨어 직접 제어 ㄱㄴ

 유연성
대부분의 응용 분야에서 사용 가능

 가용성
모든 컴퓨터에 c 컴파일러가 존재


 * 데이터 캡슐화  data encapsulation
정보 은닉

외부로부터 데이터 객체의 자세한 구현을 은닉


 * 데이터 추상화  data abstraction
객체의 명세와 구현을 분리
specification / implementation

무엇과 어떻게를 명확하게 구분
what / how


 * 데이터 타입
객체들과
이 객체들에 대한 연산의 집합

데이터 타입 = 객체 + 연산


 * c++의 데이터 타입
 1. 기본 데이터 타입
 2. 파생 데이터 타입
 3. 데이터를 묶어주는 구조

 기본 데이터 타입
char, int, float, double
타입 수식어 short, long, sigend, unsigned

 파생 데이터 타입
포인터 타입
참조 타입

 데이터를 묶어주는 구조
배열
구조체
클래스


 * 추상 데이터 타입  ADT  abstract data type
객체와 연산에 대한 명세가
객체의 표현과 연산의 구현으로부터
분리된 방식으로 구성된 데이터 타입


 * 데이터 추상화와 데이터 캡슐화의 장점
 1. 개발의 간소화
 2. 테스트와 디버깅
 3. 재사용성
 4. 데이터 타입의 표현에 대한 수정


 * 알고리즘
특정 작업을 수행하는 명령어들의 유한 집합

 알고리즘의 요건
 1. 입력
 2. 출력
 3. 명확성
 4. 유한성
 5. 유효성

 입력
외부에서 제공되는 데이터가 0개 이상

 출력
적어도 한 개 이상의 결과 생성

 명확성
각 명령은 모호하면 안 된다

 유한성
반드시 종료해야 함

 유효성
반드시 실행 가능해야 한다

 알고리즘 기술 방법
 1. 자연어
 2. 흐름도  flowchart
 3. c++ 언어


 * 선택정렬  Selection Sort
정렬되지 않은 정수들 중에서
가장 작은 값을 찾아서
정렬된 리스트 다음 자리에 놓는다

 1. arr[i] ~ arr[n-1] 사이에서 가장 작은 정수를 찾는다
 2. 찾으면 j = i 대입하고
 3. swap(arr[i], arr[j])

<<선택 정렬 예시 코드>>
#include <iostream>

void SelectionSort(int * arr, const int n);

void swap(int & a, int & b);

int main() {
  int arr[] = {5, 4, 3, 2, 1};

  SelectionSort(arr, 5);

  for (int i = 0; i < 5; i++)
    std::cout << arr[i] << std::endl;
  
  return 0;
}

void SelectionSort(int * arr, const int n) {
  for (int i = 0; i < n; i++) {
    int j = i;

    for (int k = i + 1; k < n; k++) {
      if (arr[k] < arr[j]) {
        j = k;
      }
    }

    swap(arr[i], arr[j]);
  }
}

void swap(int & a, int & b) {
  int temp = a;
  a = b;
  b = temp;

  return ;
}
..~~~~..


 * 이원 탐색  Binary Search
이미 정렬된 배열에서
찾고자 하는 값의 인덱스를 반환

left, right, middle을 이용

초기 값으로
left = 0
right = n - 1
middle = (left + right)/2

비교는
 1. x < arr[middle] -> right = middle - 1
 2. x = arr[middle] -> return middle
 3. x > arr[middle] -> left = middle + 1

<<이원 탐색 예시 코드>>
int BinarySearch(int * arr, int x, int length) {  // 순서대로 배열, 찾고자 하는 값, 배열 길이
  int left = 0;
  int right = length - 1;

  while (left <= right) {
    int middle = (left + right) / 2;

    if (x == arr[middle]) {
      return middle;
    }
    else if (x < arr[middle]) {
      right = middle - 1;
    }
    else {
      left = middle + 1;
    }
  }

  return -1;
}
..~~~~..


 * 순환 알고리즘
수행이 완료되기 전에 자기 자신을 다시 호출

 1. 직접 순환
 2. 간접 순환

 직접 순환
수행이 완료되기 전에
자기 자신을 다시 호출

 간접 호출
호출 함수를 다시 호출할 예정인
다른 함수를 호출

수학적 귀납법과 유사하다
 1. n-1에 대하여 올바르다는 것을 가정하고
 2. n에서 성립하는 것을 보임으로써 증명
 3. 직접 증명할 수 있는 basis가 필요하다


 * 수학적 귀납법
모든 자연수가 주어진 성질을 만족시킨다는
명제를 증명하는 방법

 1. 가장 작은 자연수가 그 성질을 만족함을 증명한다
 2. 임의의 자연수 n에서 성질이 참이라고 가정하고
 3. n+1에서 그 성질이 참임을 증명한다 (n을 이용하여 증명)


 * 순열 생성기
주어진 집합의 가능한 모든 순열을 출력

시작점을 잡고
그 이후 순열을 만든다 (재귀 함수를 이용)

~로 시작하는 ~의 모든 순열

ex) (a, b, c, d)로 이루어진 집합에 대한 모든 순열
a로 시작하는 (b, c, d)의 모든 순열
b로 시작하는 (a, c, d)의 모든 순열
c로 시작하는 (a, b, d)의 모든 순열
d로 시작하는 (a, b, c)의 모든 순열

<<순열 생성기 예시 코드>>
// Permutations(arr, 0, 크기)를 넣을 것을 가정
void Permutations(char * arr, const int k, const int lenght) {
  // arr은 배열 이름, k는 배열 시작 인덱스, length는 배열 끝 인덱스
  if (k == lenght) { // 순열 시작 인덱스랑 끝 인덱스가 같을 경우
    for (int i = 0; i <=lenght; i++)
      cout << arr[i] << "";

    cout << endl;
  }
  else {
    for (int i = k; i <= lenght; i++) {
      swap(arr[k], arr[i]);

      Permutations(arr, k + 1, lenght);
      
      swap(arr[k], arr[i]);
    }
  }
}
..~~~~..


 * 표준 템플릿 라이브러리  STL  standard templates library
응용 프로그래밍 작업을 간단하게 해주는 라이브러리

STL은
 1. 컨테이너
 2. 어댑터
 3. 반복자
 4. 함수 객체
 5. 알고리즘
의 집합이다


 * accumulate STL 알고리즘
순차에 있는 원소들을 합산
<numeric>에 있다

accumulate(배열 시작 주소, 배열 끝 주소, 초기값, 연산 함수)
ex) accumulate(arr, arr + length, 0);

초기값 + 시그마 값
을 리턴

연산 함수는 생략할 수 있다
생략 시 자동으로 더하기가 됨

연산함수 사용은 
 1. multiplies<int>  // x
 2. minus<int>  // -
 3. modulus<int>  // %
 4. divides<int>  // /


 * copy()
배열의 원소 순차를 다른 장소로 복사
<algorithm>에 있다

copy(배열 시작 주소, 배열 끝 주소, 복사할 배열 주소)
ex) copy(arr, arr + 3, arr02);

단 복사할 배열 주소는 미리 만들어 놓아야 한다
함수 사용과 동시에 선언은 ㅂㄱㄴ


 * next_permutation()
배열에 있는 원소들의 다음으로 큰 순서로 배열 생성
오름차순으로 생성한다
<algorithm>에 있다

해당 순열의 오름차순 상
다음으로 큰 순열을 생성

 1. 다음 순열이 존재하면 true 반환 (변경할 수 있을 경우)
 2. 존재하지 않는다면 false 반환 (변경할 수 없을 경우)

중복을 제외하고 만들어준다

next_permutation(배열 시작 주소, 배열 끝 주소)


 * 성능 평가
 1. 성능 분석
 2. 성능 측정

성능 분석은 사전 예측이고
성능 측정은 이후 검사이다

 프로그램의 평가 기준
 1. 원하는 작업을 하는가?
 2. 정확히 작업하는가?
 3. 논리적 작업 단위의 기준으로 함수가 생성되었는가?
 4. 코드가 읽기 쉬운가?


 * 공간 복잡도  space complexity
프로그램을 실행시켜 완료하는데
필요한 메모리 양

 1. 고정 부분
 2. 가변 부분

고정 부분
 1. 보통 명령어 공간
 2. 단순 변수
 3. 집합체
 4. 상수
를 위한 공간

가변 부분은
 1. 특정 문제의 인스턴스에 따라 크기가 달라지는 변수
 2. 순환 스택 공간
을 위한 공간이다

프로그램 P의 공간 요구
S(P) = c + Sp
 1. c는 상수
 2. Sp는 인스턴스 특성 (문제에 의존적)

값을 반환하는 데 한 워드가 필요하다고 생각하자

필요한 워드는
 1. 값이 저장되는 공간
 2. 반환 주소에 필요한 공간
을 말한다

for문의 경우 순환 깊이가 n + 1


 * 시간 복잡도
프로그램을 완전히 실행시키는데
필요한 시간

T(P) = 컴파일 시간 + 실행 시간

실행 시간은 tp(n)으로 표현한다
인스턴스의 특성을 반영한다
tp(n) = Ca x ADD(n) + Cs x SUB(n) + Cm x MUL(n) + Cd x DIV(n)

Ca, Cs, Cm, Cd는
연산을 위한 상수 시간을 의미한다

ADD(n), SUB(n), MUL(n), DIV(n)은
각 연산의 실행 횟수를 의미한다

다만 이 경우
 1. 피연산자의 종류
 2. 컴퓨터의 성능
 3. 다중 프로그래밍 실행
에 따라 시간 복잡도가 달라질 수 있다


 * 프로그램 단계 수  number of steps
 1. 주석은 0
 2. 선언문은 0
 3. 산술식은 1
 4. 지정문은 1
 5. 반목문은 제어 부분만 고려
 6. 스위치 명령문은
  (1) 조건에 할당된 비용과 같다
  (2) 계산 직전 case의 비용까지 고려
 7. if문은 각 조건에 따라 고려
 8. 함수 호출문은
  (1) 값에 의한 전달 인자가 포함되지 않으면 -> 1
  (2) 값에 의한 전달 인자가 포함되면 -> 값 인자 크기의 합
  (3) 순환적인 경우는 -> 호출되는 함수의 지역 변수도 고려
 9. 메모리 관련 명령문은 1
 10. 함수 명령문은 0
 11. 분기 명령문은 1

for문의 경우
n x (for문 실행으로 count 한번 + for문 안의 문장마다 count++)
+ for문 마지막 실행으로 count 한번

즉, n x (1 + 실행 문장 개수) + 1

프로그램 단계 수를 확인하는 방법은
위의 조건에 맞춰서 문장 밑에 count++을 하는 방법이 있다


 * 단계 수 테이블
s/e 결정

s/e
step per excution
명령문의 실행당 단계 수
명령문의 실행 결과로 count가 변화하는 양

행 번호 // (s/e) // 빈도 // 단계 수
의 표로 구성된다

이 때 for문의 조건 판정 부분은 n+1회 반복이고
for문 안의 실행 문장은 n회 반복이다


 * 피보나치 수열
F(n) = F(n-1) + F(n-2)
F(0) = 0
F(1) = 1

즉 F(n) : 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, ...

<<피보나치 수열 예시 코드>>
..~~~~..
void Fibonacci(int n) {
  if (n <= 1)  // 0, 1번째 피보나치 수열은 값이 각각 0, 1이다
    cout << n << endl;
  else {
    int fn;
    int fnm2 = 0;  // 0번째 원소의 값은 0
    int fnm1 = 1;  // 1번째 원소의 값은 1

    for (int i = 2; i <= n; i++) {
      fn = fnm1 + fnm2;  // 피보나치 수열의 정의
      fnm2 = fnm1;
      fnm1 = fn;
    }

    cout << fn << endl;
  }
}
..~~~~..


 * 빅 오 표기법  big oh
모든 n, n>n0에 대하여
f(n)<=c x g(n)을 만족하는 c와 n0가 존재하면
f(n) = O(g(n))

빅 오는 상한선을 의미
최대 성능은 이 정도이다

 연산 시간
 1. 상수 시간  O(1)
 2. 로그 시간  O(log n)
 3. 선형 시간  O(n)
 4. n 로그 시간  O(n x log n)
 5. 평방 시간  O(n^2)
 6. 입방 시간  O(n^3)
 7. 지수 시간  O(2^n)
밑으로 갈수록 연산 시간이 늘어난다


 * 오메가  omega
모든 n, n>n0에 대하여
f(n)>=c x g(n)을 만족하는 c와 n0가 존재하면
f(n) = Ω(g(n))

오메가는 하한선을 의미
최소 성능은 이 정도이다


 * 세타  theta
모든 n, n>n0에 대하여
c1 x g(n)<=f(n)<=c2 x g(n)을 만족하는 c1, c2와 n0가 존재하면
f(n) = Θ(g(n))


 * 매직 스퀘어  magic square
1~n^2까지의 정수로 된 n x n 행렬
각 행의 합, 열의 합, 주대각선의 합이 모두 동일하다

 1. 첫번째 행의 중앙에 1을 넣는 것부터 시작
 2. 왼쪽 대각선으로 이동하면서 +1을 한다
 3. 왼쪽 대각선이 차 있거나 끝 자리이면 마지막 행의 같은 열로 이동한다

<<매직 스퀘어 예시 코드>>
..~~~~..
void Magic(const int n) { // n x n 크기의 상자를 위한 입력
  const int MaxSize = 51;  // 스퀘어의 최대 크기
  int square[MaxSize][MaxSize];
  int k, l;

  // 에러 정의
  // 1. 범위
  // 2. 홀수가 아닐 때
  if ((n>MaxSize) || (n<1)) {
    cout << "Error: n is out of range" << endl;
  }
  else if (!(n%2)) {
    cout << "Error: n is even" << endl;
  }

  // 박스 초기화
  for (int i = 0; i < n; i++)
    square[i][i] = 0;

  // 현재 위치를 알려주는 변수 (i, j)
  // 투입하는 값 key
  int i = 0;
  int j = (n-1)/2;
  int key = 1;

  // 초기값 투입
  square[0][(n-1)/2] = key++;

  while (key<n*n) {
    // 왼쪽 위로 이동
    if (i-1 < 0)
      k = n - 1;
    else
      k = i - 1;

    if (j-1 < 0)
      l = n - 1;
    else
      l = j - 1;

    if (square[k][l])
      i = (i + 1) % n; // 박스가 채워지면 맨 아래로 이동
    else {
      i = k;
      j = l;
    }

    square[i][j] = key++;
  }

  square[n-1][(n-1)/2] = n * n;  // 마지막 값 입력

  cout << "magic square of size : " << n << endl << endl;

  for (int a = 0; a < n; a++) {
    for (int b = 0; b < n; b++) {
      cout << square[a][b] << "\t";
    }
    cout << endl;
  }
}
..~~~~..


 * 성능 측정
시간을 측정할 n의 값들을 결정
n의 값들에 대해서 최악의 성질을 가진 데이터 결정

점근적 해석 Θ(n)
작은 n 값에 따라서 점근적 곡선을 따르지 않을 수 있으므로
몇 개의 n 값에 대한 시간 측정 필요
무시된 저차항들의 영향 때문에 정확하지 않을 수 있다

<<순차 탐색 함수 예시 코드>>
// 크기가 n인 배열 arr에서 key 값이 있는 인덱스 찾기 
int SequentialSearch(int * arr, const int n, const int key) {
  int i;

  for (int i = 0; i < n && arr[i] != key; i++) {
    if (i==n)
      return -1;
    else
      return i;
  }
}
..~~~~..

<<성능 측정 예시 코드>>
void TimeSearch() {
    int a[1001], n[20];

    for (int j = 1; j <= 1000; j++) {
        a[j] = j;
    }

    for (int j = 0; j < 20; j++) {
        n[j] = 10 * j;
        n[j + 10] = 100 * (j + 1);
    }

    cout << " n time" << endl;

    for (int j = 0; j < 20; j++) {
        // 시간 측정 시작
        time_t start = time(nullptr);

        // 시간 측정할 함수 입력
        SequentialSearch(a + 1, n[j], 0);

        // 시간 측정 종료
        time_t stop = time(nullptr);

        long runTime = stop - start;

        cout << " " << n[j] << " " << runTime << endl;
    }

    cout << "Times are in seconds." << endl;
}
..~~~~..


 * 테스트 데이터의 생성
대규모로 테스트하므로
결과 중 최대 값을 최악의 경우의 시간으로 사용한다

평균 시간 역시 어림 값으로 계산한다