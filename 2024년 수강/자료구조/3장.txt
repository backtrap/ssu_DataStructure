 * 템플릿 함수
클래스와 함수의 재사용성에 기여

개발 시간과 저장 공간을 절약


 * 컨테이너 클래스
다수의 데이터 객체들을 수용 or 저장하는 자료구조를
표현하는 클래스

객체들의 삽입과 삭제가 가능하다

ex) 백  Bag


 * 백  Bag
동일한 원소가 여러 번 나타남

원소 위치, 삭제 연산 시
어떤 원소가 제거되는지 문제 안 됨

 삽입
배열의 첫 번째 가용 위치에 저장
배열이 만원이면 -> 크기를 두 배 확장

 삭제
배열 중앙 위치에 있는 워소 삭제
그 후 오른쪽 원소는 한 자리씩 왼쪽으로 이동

하지만 삭제는 랜덤 위치에서의 삭제가 더 적절하다

<<백 클래스 예시 코드>>
class Bag {
private :
  int * array;
  int capacity;
  int top;  // 가장 높은 인덱스

public :
  Bag(int bagCapacity = 10) : capacity(bagCapacity) {
    if (capacity < 1)
      cout << "error" << endl;
    
    array = new int[capacity];

    top = -1;
  }

  ~ Bag() {
    delete [] array;
  }

  int Size() const {
    return top + 1;
  }

  bool isEmpty() const {
    return Size() == 0;
  }

  int Element() const {
    if (isEmpty())
      cout << "bag is empty" << endl;
    
    return array[top];
  }

  void Push(const int x) {
    if (capacity == top + 1)
      capacity *= 2;

    array[++top] = x;
  }

  void Pop() {
    if (isEmpty())
      cout << "bag is empty" << endl;

    int deletePos = top/2;

    copy(array + deletePos + 1, array + top + 1, array + deletePos);

    top--;
  }
};

// 이 코드는 삭제 연산을 중간 위치로 설정해 둔 것이다
..~~~~..


 * 스택  stack
톱이라고 하는 한 쪽 끝에서
모든 삽입과 삭제가 일어나는 순서 리스트

후입선출
LIFO  Last In First Out

 1. top
 2. push
 3. pop

 top
스택의 최상위 원소의 인덱스
초기값은 -1

<<스택 예시 코드>>
template <class T>
class Stack {
private :
  T * stack;
  int top;
  int capacity;

public :
  Stack(int stackCapacity) : capacity (stackCapacity) {
    if (capacity<1)
      cout << "Stack capacity must be at least 1";

    stack = new T[capacity];

    top = -1;
  }

  bool isEmpty() const {
    return top == -1;
  }

  T & Top() const {
    if (isEmpty())
      cout << "Stack is empty"<<endl;

    return stack[top];
  }

  void Push(const T & item) {
    if (top == capacity - 1) {
      ChangeSize1D(stack, capacity, 2 * capacity);
      capacity *= 2;
    }

    stack[++top] = item;
  }

  void Pop() {
    if (isEmpty()) {
      cout << "Stack is empty"<<endl;
    }

    stack[top--].~T();
  }
};
..~~~~..


 * 시스템 스택
프로그램 실행시 함수 호출을 처리

함수 호출시
활성 레코드 or 스택 프레임 구조를 생성하여
시스템 스택의 톱에 두는 것
 1. 이전의 스택 프레임에 대한 포인터
 2. 복귀 주소
 3. 지역 변수
 4. 매개 변수

재귀 함수 역시
순환 호출 시마다 새로운 스택 프레임 생성


 * 큐  queue
한쪽 끝에서 삽입이 일어나고
그 반대쪽 끝에서 삭제가 일어나는 순서 리스트

 1. rear에서 삽입되고
 2. front에서 삭제됨

 선입선출  FIFO  First In First Out


 * 1차원 배열 큐
큐의 첫 원소를 queue[0]으로 표현

변수 front를 사용해서
큐의 첫번째 위치를 항상 유지

front>0일 때
rear가 capacity-1과 같다


 * 원형 큐  Circular queue
front는 첫 원소 위치보다 하나 앞
rear은 마지막 원소

 생성자
if (크기<1) -> 에러문
else T * queue = new T[크기];
front = rear = 0;

isEmpty() {
  return front == rear;
}

T & front() {
  if (isEmpty()) -> 에러문

  return queue[(front+1)%capacity];
}

T & push(const T & x) {
  if((rear + 1)%capacity == front) {}

  rear = (rear + 1)%capacity;

  queue[rear] = x;
}

 push() 구현
 1. 크기가 2배인 배열 생성
 2. front+1 ~ capacity-1 부분을 붙여넣기
 3. 0 ~ rear 부분을 capacity-front-1에 붙여넣기

 lastOp 변수
배열 queue의 공간 전부를 사용할 수 있도록 하는 방법
큐에서 수행된 마지막 연산을 기록


 * 상속  inheritance
추상 데이터 타입간의
서브타입 관계를 표현

IS-A 관계


 * 수식
피연산자, 연산자, 분리자로 구성

연산의 수행 순서 파악 필요

연산자의 우선 순위 지정 필요


 * 수식의 종류
 1. 중위 표기식  // A * B / C
 2. 후위 표기식  // A B * C /
 3. 전위 표기식  // / * A B C


 * 후위 표기식
괄호가 불필요

연산자의 우선 순위가 무의미

계산 과정이 간단
왼쪽에서 오른쪽으로 스캔

A/B - C + D*E - A*C를 후위 표기식으로 바꾸면
AB/C - DE* + AC*


 * 중위 표기에서 후위 표기로 바꾸기 (스택 사용)
 1. 식을 전부 괄호()로 묶는다
 2. 이항 연산자들을 모두 자기 오른쪽 괄호로 이동시킨다
 3. 괄호를 전부 삭제한다

ex)
A/B - C + D*E - A*C
-> ((((A/B) - C) + (D*E)) - (A*C))
-> AB/C -DE*+AC*- 

이 때 스택을 사용한다
 1. 식을 입력받고
 2. 피연산자이면 바로 출력
 3. 연산자이면 스택에 저장했다가 입력이 끝나면 출력
 4. 단, 괄호()는 피연산자 취급한다
 5. 괄호의 경우 괄호가 닫히면 그 안에 있는 피연산자를 스택에서 내보낸다
 6. 괄호() 출력하지 않는다

단, #은 없다고 가정

( 괄호는 스택 속에 있을 때
낮은 우선순위의 연산자처럼 동작

 isp (in stack priority)
 1순위. 단항-, !
 2순위. *, /, %
 3순위. +, -
 4순위. <, <=, >=, >
 5순위. ==, !=
 6순위. &&
 7순위. ||

 icp (in coming priority)
 0순위. (
 1순위. 단항-, !
 2순위. *, /, %
 3순위. +, -
 4순위. <, <=, >=, >
 5순위. ==, !=
 6순위. &&
 7순위. ||
 8순위. #
